// Code generated by "enumer -type=ListObjectsFormat -json -text -yaml -trimprefix=ListObjectsFormat -transform=kebab"; DO NOT EDIT.

package cmd

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ListObjectsFormatName = "plaincwl-s3-event"

var _ListObjectsFormatIndex = [...]uint8{0, 5, 17}

const _ListObjectsFormatLowerName = "plaincwl-s3-event"

func (i ListObjectsFormat) String() string {
	if i >= ListObjectsFormat(len(_ListObjectsFormatIndex)-1) {
		return fmt.Sprintf("ListObjectsFormat(%d)", i)
	}
	return _ListObjectsFormatName[_ListObjectsFormatIndex[i]:_ListObjectsFormatIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ListObjectsFormatNoOp() {
	var x [1]struct{}
	_ = x[ListObjectsFormatPlain-(0)]
	_ = x[ListObjectsFormatCwlS3Event-(1)]
}

var _ListObjectsFormatValues = []ListObjectsFormat{ListObjectsFormatPlain, ListObjectsFormatCwlS3Event}

var _ListObjectsFormatNameToValueMap = map[string]ListObjectsFormat{
	_ListObjectsFormatName[0:5]:       ListObjectsFormatPlain,
	_ListObjectsFormatLowerName[0:5]:  ListObjectsFormatPlain,
	_ListObjectsFormatName[5:17]:      ListObjectsFormatCwlS3Event,
	_ListObjectsFormatLowerName[5:17]: ListObjectsFormatCwlS3Event,
}

var _ListObjectsFormatNames = []string{
	_ListObjectsFormatName[0:5],
	_ListObjectsFormatName[5:17],
}

// ListObjectsFormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ListObjectsFormatString(s string) (ListObjectsFormat, error) {
	if val, ok := _ListObjectsFormatNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ListObjectsFormatNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ListObjectsFormat values", s)
}

// ListObjectsFormatValues returns all values of the enum
func ListObjectsFormatValues() []ListObjectsFormat {
	return _ListObjectsFormatValues
}

// ListObjectsFormatStrings returns a slice of all String values of the enum
func ListObjectsFormatStrings() []string {
	strs := make([]string, len(_ListObjectsFormatNames))
	copy(strs, _ListObjectsFormatNames)
	return strs
}

// IsAListObjectsFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ListObjectsFormat) IsAListObjectsFormat() bool {
	for _, v := range _ListObjectsFormatValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ListObjectsFormat
func (i ListObjectsFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ListObjectsFormat
func (i *ListObjectsFormat) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ListObjectsFormat should be a string, got %s", data)
	}

	var err error
	*i, err = ListObjectsFormatString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ListObjectsFormat
func (i ListObjectsFormat) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ListObjectsFormat
func (i *ListObjectsFormat) UnmarshalText(text []byte) error {
	var err error
	*i, err = ListObjectsFormatString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ListObjectsFormat
func (i ListObjectsFormat) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ListObjectsFormat
func (i *ListObjectsFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ListObjectsFormatString(s)
	return err
}
